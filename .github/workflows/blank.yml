#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 100

// Cài đặt đồ thị bằng ma trận lân cận
typedef struct {
    int matrix[MAX][MAX];
    int num_vertices;
} GraphMatrix;

void initGraphMatrix(GraphMatrix* graph, int num_vertices) {
    graph->num_vertices = num_vertices;
    for (int i = 0; i < num_vertices; i++) {
        for (int j = 0; j < num_vertices; j++) {
            graph->matrix[i][j] = 0;
        }
    }
}

void addEdgeMatrix(GraphMatrix* graph, int u, int v) {
    graph->matrix[u][v] = 1;
    graph->matrix[v][u] = 1; // Đồ thị vô hướng
}

void bfsMatrix(GraphMatrix* graph, int start) {
    bool visited[MAX] = {false};
    int queue[MAX], front = 0, rear = 0;

    visited[start] = true;
    queue[rear++] = start;

    printf("BFS: ");
    while (front < rear) {
        int vertex = queue[front++];
        printf("%d ", vertex);

        for (int i = 0; i < graph->num_vertices; i++) {
            if (graph->matrix[vertex][i] == 1 && !visited[i]) {
                queue[rear++] = i;
                visited[i] = true;
            }
        }
    }
    printf("\n");
}

void dfsMatrixUtil(GraphMatrix* graph, int vertex, bool visited[]) {
    visited[vertex] = true;
    printf("%d ", vertex);

    for (int i = 0; i < graph->num_vertices; i++) {
        if (graph->matrix[vertex][i] == 1 && !visited[i]) {
            dfsMatrixUtil(graph, i, visited);
        }
    }
}

void dfsMatrix(GraphMatrix* graph, int start) {
    bool visited[MAX] = {false};
    printf("DFS: ");
    dfsMatrixUtil(graph, start, visited);
    printf("\n");
}

// Cài đặt đồ thị bằng danh sách lân cận
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

typedef struct {
    Node* adj_list[MAX];
    int num_vertices;
} GraphList;

void initGraphList(GraphList* graph, int num_vertices) {
    graph->num_vertices = num_vertices;
    for (int i = 0; i < num_vertices; i++) {
        graph->adj_list[i] = NULL;
    }
}

Node* createNode(int v) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

void addEdgeList(GraphList* graph, int u, int v) {
    Node* newNode = createNode(v);
    newNode->next = graph->adj_list[u];
    graph->adj_list[u] = newNode;

    newNode = createNode(u);
    newNode->next = graph->adj_list[v];
    graph->adj_list[v] = newNode;
}

void bfsList(GraphList* graph, int start) {
    bool visited[MAX] = {false};
    int queue[MAX], front = 0, rear = 0;

    visited[start] = true;
    queue[rear++] = start;

    printf("BFS: ");
    while (front < rear) {
        int vertex = queue[front++];
        printf("%d ", vertex);

        Node* temp = graph->adj_list[vertex];
        while (temp) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                queue[rear++] = adjVertex;
                visited[adjVertex] = true;
            }
            temp = temp->next;
        }
    }
    printf("\n");
}

void dfsListUtil(GraphList* graph, int vertex, bool visited[]) {
    visited[vertex] = true;
    printf("%d ", vertex);

    Node* temp = graph->adj_list[vertex];
    while (temp) {
        int adjVertex = temp->vertex;
        if (!visited[adjVertex]) {
            dfsListUtil(graph, adjVertex, visited);
        }
        temp = temp->next;
    }
}

void dfsList(GraphList* graph, int start) {
    bool visited[MAX] = {false};
    printf("DFS: ");
    dfsListUtil(graph, start, visited);
    printf("\n");
}

int main() {
    printf("--- Ma trận lân cận ---\n");
    GraphMatrix graph_matrix;
    initGraphMatrix(&graph_matrix, 5);
    addEdgeMatrix(&graph_matrix, 0, 1);
    addEdgeMatrix(&graph_matrix, 0, 4);
    addEdgeMatrix(&graph_matrix, 1, 2);
    addEdgeMatrix(&graph_matrix, 1, 3);
    addEdgeMatrix(&graph_matrix, 1, 4);
    addEdgeMatrix(&graph_matrix, 3, 4);

    bfsMatrix(&graph_matrix, 0);
    dfsMatrix(&graph_matrix, 0);

    printf("--- Danh sách lân cận ---\n");
    GraphList graph_list;
    initGraphList(&graph_list, 5);
    addEdgeList(&graph_list, 0, 1);
    addEdgeList(&graph_list, 0, 4);
    addEdgeList(&graph_list, 1, 2);
    addEdgeList(&graph_list, 1, 3);
    addEdgeList(&graph_list, 1, 4);
    addEdgeList(&graph_list, 3, 4);

    bfsList(&graph_list, 0);
    dfsList(&graph_list, 0);

    return 0;
}
